// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Bin collection point address - as referenced in https://api.reading.gov.uk/v0.json#/components/schemas/Address'
type Address struct {
	AccountSiteId     *string `json:"AccountSiteId,omitempty"`
	AccountSiteUprn   *string `json:"AccountSiteUprn,omitempty"`
	SiteAddress2      *string `json:"SiteAddress2,omitempty"`
	SiteAddressPrefix *string `json:"SiteAddressPrefix,omitempty"`
	SiteEasting       *string `json:"SiteEasting,omitempty"`
	SiteId            *string `json:"SiteId,omitempty"`
	SiteLatitude      *string `json:"SiteLatitude,omitempty"`
	SiteLongitude     *string `json:"SiteLongitude,omitempty"`
	SiteNorthing      *string `json:"SiteNorthing,omitempty"`
	SiteShortAddress  *string `json:"SiteShortAddress,omitempty"`
}

// List of addresses - as referenced in https://api.reading.gov.uk/v0.json#/components/schemas/Addresses'
type Addresses = []Address

// Status defines model for Status.
type Status struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Success defines model for Success.
type Success = map[string]interface{}

// SubscribeJSONBody defines parameters for Subscribe.
type SubscribeJSONBody = Success

// SubscribeJSONRequestBody defines body for Subscribe for application/json ContentType.
type SubscribeJSONRequestBody = SubscribeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /addresses/{postcode})
	GetAddresses(ctx echo.Context, postcode string) error

	// (POST /collection/subscribe)
	Subscribe(ctx echo.Context) error

	// (GET /collection/subscribe/{subscriptionId})
	GetSubscriptionDetails(ctx echo.Context, subscriptionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "postcode" -------------
	var postcode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "postcode", runtime.ParamLocationPath, ctx.Param("postcode"), &postcode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter postcode: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAddresses(ctx, postcode)
	return err
}

// Subscribe converts echo context to params.
func (w *ServerInterfaceWrapper) Subscribe(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Subscribe(ctx)
	return err
}

// GetSubscriptionDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubscriptionDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subscriptionId", runtime.ParamLocationPath, ctx.Param("subscriptionId"), &subscriptionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subscriptionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubscriptionDetails(ctx, subscriptionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/addresses/:postcode", wrapper.GetAddresses)
	router.POST(baseURL+"/collection/subscribe", wrapper.Subscribe)
	router.GET(baseURL+"/collection/subscribe/:subscriptionId", wrapper.GetSubscriptionDetails)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTY/bNhD9KwO2QC+KJTnyOvbN23W3BoxkYSenIAdaGslMJJIhR+4aC//3gpTWtvzR",
	"LdA0TW+yxDczb+a9oZ9YqiqtJEqybPzEbLrGivvHSZYZtP4xQ5saoUkoycbsVkhIVVli6l6AVkIS8OY0",
	"vAJuwWCOBmWKGQgJayJtx2HItegZ5JmQRa9Qm179JdxEvc9WyZ/CQxVhW0LY5v+FBUwbpdGQwKawNFW1",
	"pKUgnGXuBT7ySpfIxmwYJ4OEBYy22v20ZIQs2C44xnzQRnZRr+MoGvaTweAS0kHaUvpd2PI93M/m0yX8",
	"On+3nL6AfTCYi8dugLdK4jXYlFtyPzuAZBi/ieNedA102o6bZBjH1w7POQmqM+xCBnEvGcRRNIpukuQq",
	"VMniAvZV1BvdDEc3yZtRFA+G19BvlaH1Gbd42B8Nkuvclmtl6EiTB+RkfjddwO/vPiynAfw2n7yHOIDu",
	"cAJY3MfQnyzOo+/2b9TqM6bk1dKkwQvinwtLoPJnveO/oHj0mheElc//s8GcjdlfIdiBBDeGb33PiFPt",
	"A3Tdk6pmbLkyFSc2ZkLS6/6hL0ISFmhciAqt5YU/fd40g19rYTBj449NzMP5TxdauqzTtJ3cyTcXTMhc",
	"nfd6ImHyMINcGSiQnB1g1d09GRIXpYXcqAoWTafBOT0VpaMkyCvkVsiVEi4YC9gGjW3iRz3npV3AlEbJ",
	"tXCroNfYS3Na+2LD/aDDJ60sOao796FAOq94gVQbaaE8UwmtOUHFKV0DrREKsUG3OpuAzJdguIviPMzu",
	"kQ4adNUYXiGhsWz88TTnQxvE5XOhj3IqMEhG4MZlEO6w48UCJnnl+nKU/zBOMjUG7UVwafSf3GGrlWz9",
	"0Y+iRleSUPqecK1LkXo2oRP74WL5m3pG28jiRA57Yr6PbtR7Av5wzuuSvlktrYEuFHLXZAI0RhloVd92",
	"uzbSPaWl8FfqzsPDg2RDW69crJW3lav/XEXL5yMu0onipSKRt4TsmW72yHaiaOlWZdtv15PWxRea0qbW",
	"HV+ScnL0Dn6BR1d/uzON9b/DXDsUbEM1r8tyCzz9ItUfJWYFZk5rSTT6DvVMJPCUxAbBHlfGS3enbAEf",
	"hSX7f5R++HRMaJZdX6j3SH6pPQvK7VTZMHf+7/RlxS1moCQIsjC7u7RUjyd814R8ab3O7p4XazcZuvxf",
	"azQCs8vbtcvxH+7Y+D/Vf2qQUyP9H8mK8AosibIEjTJr/yv+sF7Y7f4MAAD//13XFRdtDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
